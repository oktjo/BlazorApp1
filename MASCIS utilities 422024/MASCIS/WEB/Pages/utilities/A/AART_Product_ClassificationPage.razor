@page "/artproductPage"
@inject IUtilityService Repo
@inject IToastService toastService;
<h3>AARTProductClassification</h3>

    <SfGrid @ref="@DataGrid"   TValue="AProductClassification" ID="Grid1" AllowPaging="true" AllowFiltering="true" AllowReordering="true"
            AllowResizing="true" AllowGrouping="true" AllowExcelExport="true" AllowPdfExport="true" AllowSelection="true"
            AllowSorting="true" Toolbar="@(new List<string>() {"Add", "Edit", "Delete", "Cancel", "Update", "Search"})">
        <GridEditSettings AllowAdding="true" AllowEditing="true" AllowDeleting="true"></GridEditSettings>
        <GridFilterSettings Type="Syncfusion.Blazor.Grids.FilterType.Excel"></GridFilterSettings>
        <GridPageSettings PageSizes="true"></GridPageSettings>
        <GridSelectionSettings Type="Syncfusion.Blazor.Grids.SelectionType.Single"></GridSelectionSettings>
        <GridEvents OnToolbarClick="@GridToolbarClick" OnActionBegin="OnPCActionBegin" OnActionComplete=@OnPCActionComplete TValue="AProductClassification"></GridEvents>
             <SfDataManager AdaptorInstance="@typeof(ProductClassificationAdapter)"  Adaptor="Adaptors.CustomAdaptor"></SfDataManager>  
        <GridEditSettings AllowAdding="true" AllowDeleting="true" AllowEditing="true" Mode="@EditMode.Dialog">
                    <Template Context="ProductClassificationContext">
                @{
                    var ProClass = (ProductClassificationContext as AProductClassification);
                    if(ProClass != null)
                    {
                         <div class="row">
                                <div class="col-md-4" hidden>
                                    <SfNumericTextBox @bind-Value=@ProClass.Id />
                                </div>
                                <div class="col-md-4">
                                    <label>Product Type</label>
                                    <SfTextBox Multiline=false @bind-Value=@ProClass.ProductType Placeholder="Enter Product Type" FloatLabelType="FloatLabelType.Never" />
                                </div>
                                <div class="col-md-4">
                                    <label>Classification</label>
                                    <SfTextBox Multiline=false @bind-Value=@ProClass.Classification Placeholder="Enter Classification" FloatLabelType="FloatLabelType.Never" />
                                </div>
                          </div>
                    }
                
                 }
                    </Template>

                </GridEditSettings>
    <GridColumns>
            <GridColumn Type="ColumnType.CheckBox" Width="50"></GridColumn>
        <GridColumn Field="@(nameof(AProductClassification.Id))" HeaderText="ProductClassificationId" Visible=false AllowEditing="false" IsPrimaryKey="true" Width="120"></GridColumn>
        <GridColumn Field="@(nameof(AProductClassification.ProductType))" HeaderText="Product Type" Width="120" ></GridColumn>
        <GridColumn Field="@(nameof(AProductClassification.Classification))" HeaderText="Classification" Width="120"></GridColumn>
    </GridColumns>
</SfGrid>

@code{
    SfGrid<AProductClassification>? DataGrid { get; set; }
    List<AProduct>? ProductData { get; set; }
    //List<AProductClassification>? APC  { get; set; }




    public void GridToolbarClick(Syncfusion.Blazor.Navigations.ClickEventArgs args)
    {
        if (args.Item.Id == "Grid1_excelexport")
        {
            this.DataGrid.ExportToExcelAsync();
        }
        if (args.Item.Id == "Grid1_pdfexport")
        {
            this.DataGrid.ExportToPdfAsync();
        }
        if (args.Item.Id == "Grid1_csvexport")
        {
            this.DataGrid.ExportToCsvAsync();
        }
    }



    protected override async Task OnInitializedAsync()
    {

        try
        {
            await base.OnInitializedAsync();
            List<Task> t = new List<Task>();
            // t.Add(
            //  Task.Run(async () =>
            //  {
            //      APC = await Repo.GetProductClassification();


            //  }));

            t.Add(
               Task.Run(async () =>
               {
                   ProductData = await Repo.GetProduct();


               }));

            Task _t = Task.WhenAll(t);
            await _t;
        }
        catch (Exception ex)
        {
            toastService.ShowError(ex.Message);
        }
    }

    public class ProductClassificationAdapter : DataAdaptor
    {

        public IToastService toastService;
        IUtilityService Repo;
        public ProductClassificationAdapter(IToastService ts, IUtilityService Repo)
        {
            toastService = ts;
            this.Repo = Repo;
        }
        
        public override async Task<Object> ReadAsync(DataManagerRequest dataManagerRequest, string key = null)
        {
            var data = new List<AProductClassification>();
            try
            {
                int ClassificationId = 0;
                if (dataManagerRequest.Params != null && dataManagerRequest.Params.Count > 0)
                {
                    var val = dataManagerRequest.Params;
                    if (val.FirstOrDefault(o => o.Key == "ClassificationId").Value != null)
                    {
                        ClassificationId = Convert.ToInt32(val.FirstOrDefault(o => o.Key == "ClassificationId").Value.ToString());
                    }
                }

                data = await Repo.GetProductClassification();
            }
            catch (Exception ex)
            {
                toastService.ShowError(ex.Message.ToString());
            }
            IEnumerable GridData = data;
            int _count = data.Count;
            if (dataManagerRequest.Search != null && dataManagerRequest.Search.Count > 0)
            {
                // Searching
                GridData = DataOperations.PerformSearching(GridData, dataManagerRequest.Search);
            }
            if (dataManagerRequest.Where != null && dataManagerRequest.Where.Count > 0)
            {
                // Filtering
                GridData = DataOperations.PerformFiltering(GridData, dataManagerRequest.Where, dataManagerRequest.Where[0].Operator);
            }
            if (dataManagerRequest.Sorted?.Count > 0) // perform Sorting
            {
                GridData = DataOperations.PerformSorting(GridData, dataManagerRequest.Sorted);
            }
            if (dataManagerRequest.Skip != 0)
            {
                GridData = DataOperations.PerformSkip(GridData, dataManagerRequest.Skip); //Paging
            }
            if (dataManagerRequest.Take != 0)
            {
                GridData = DataOperations.PerformTake(GridData, dataManagerRequest.Take);
            }
            IDictionary<string, object> aggregates = new Dictionary<string, object>();
            if (dataManagerRequest.Aggregates != null) // Aggregation
            {
                aggregates = DataUtil.PerformAggregation(GridData, dataManagerRequest.Aggregates);
            }
            if (dataManagerRequest.Group != null && dataManagerRequest.Group.Any()) //Grouping
            {
                foreach (var group in dataManagerRequest.Group)
                {
                    GridData = DataUtil.Group<AProductClassification>(GridData, group, dataManagerRequest.Aggregates, 0, dataManagerRequest.GroupByFormatter);
                }
            }
          
            return dataManagerRequest.RequiresCounts ? new DataResult() { Result = GridData, Count = _count, Aggregates = aggregates } : (object)GridData;
        }
        public override async Task<Object> InsertAsync(DataManager dataManager, object value, string key)
        {
            try
            {
                var val = (value as AProductClassification);
                await Repo.SaveAProductClassification(val);
                // string result = "Record Saved Successfully";
                //toastService.ShowInfo(result);
            }
            catch (Exception ex)
            {
                toastService.ShowError(ex.Message.ToString());
            }
            return value;
        }

        public override async Task<object> RemoveAsync(DataManager dataManager, object value, string keyField, string key)
        {
            try
            {
                int data = (int)value;

            }
            catch (Exception ex)
            {
                toastService.ShowError(ex.Message.ToString());
            }


            return value;
        }

        public override async Task<object> UpdateAsync(DataManager dataManager, object value, string keyField, string key)
        {
            try
            {
                var val = (value as AProductClassification);
                await Repo.SaveAProductClassification(val);
                //string result = "Record Saved Successfully";
                //toastService.ShowInfo(result);
            }
            catch (Exception ex)
            {
                toastService.ShowError(ex.Message.ToString());
            }

            return value;
        }
    }
    private async void OnPCActionBegin(ActionEventArgs<AProductClassification> args)
    {
        if (args.RequestType == Syncfusion.Blazor.Grids.Action.Add)
        {
        }
        else if (args.RequestType == Syncfusion.Blazor.Grids.Action.BeginEdit)
        {
        }
        else if (args.RequestType == Syncfusion.Blazor.Grids.Action.Save)
        {

            if (string.IsNullOrEmpty(args.Data.ProductType))
            {
                toastService.ShowInfo("Please Enter the Product type before saving this  Product Classification.");
                args.Cancel = true;
            }
            else if (string.IsNullOrEmpty(args.Data.Classification))
            {
                toastService.ShowInfo("Please Enter the classification before saving this Product Classification.");
                args.Cancel = true;
            }
            else
            {
                args.Cancel = false;
            }

        }
    }
    private void OnPCActionComplete(ActionEventArgs<AProductClassification> args)
    {
        if (args.RequestType == Syncfusion.Blazor.Grids.Action.Add || args.RequestType == Syncfusion.Blazor.Grids.Action.BeginEdit)
        {
           
            DataGrid.PreventRender(false);
         
        }


    }
 
}



