@page "/AFacilitiesPage"
@inject IToastService toastService;
@inject IUtilityService Repo;
<h3>OwnershipPage</h3>
<div class="row">
    <div class="col-md-12">
        @*<BreadcrumbPage CategoryName="Utility" PageName="Contact" />*@
    </div>
    <div class="col-md-12">
        <SfGrid @ref="@DataGrid" TValue="AFacilities" ID="Grid1" AllowPaging="true" AllowFiltering="true" AllowReordering="true"
                AllowResizing="true" AllowGrouping="true" AllowExcelExport="true" AllowPdfExport="true" AllowSelection="true"
                AllowSorting="true" Toolbar="@(new List<string>() {"Add", "Edit", "Delete", "Cancel", "Update", "Search","PdfExport"})">
            <GridEditSettings AllowAdding="true" AllowEditing="true" AllowDeleting="true"></GridEditSettings>
            <GridFilterSettings Type="Syncfusion.Blazor.Grids.FilterType.Excel"></GridFilterSettings>
            <GridPageSettings PageSizes="true"></GridPageSettings>
            <GridSelectionSettings Type="Syncfusion.Blazor.Grids.SelectionType.Single"></GridSelectionSettings>
            <GridEvents OnToolbarClick="@GridToolbarClick" OnActionBegin="OnAYesActionBegin" OnActionComplete=@OnAYesActionComplete TValue="AFacilities"></GridEvents>
            <SfDataManager AdaptorInstance="@typeof(AFacilitiesAdapter)" Adaptor="Adaptors.CustomAdaptor"></SfDataManager>
            <GridEditSettings AllowAdding="true" AllowDeleting="false" AllowEditing="true" Mode="@EditMode.Dialog">
                <Template Context="AFacilitiesContext">
                    @{

                        var ContactReviewData = (AFacilitiesContext as AFacilities);
                        if (ContactReviewData != null)
                        {
                            <div class="row">
                                <div class="col-md-4" hidden>
                                    <SfNumericTextBox @bind-Value=@ContactReviewData.FacilityCode />
                                </div>
                                
                                    <div class="col-md-4" hidden>
                                        <SfNumericTextBox @bind-Value=@ContactReviewData.DeliveryZoneCode Placeholder="DeliveryZoneCode" FloatLabelType="FloatLabelType.Never" />
                                    </div
                                    
                                    <div class="col-md-4" hidden>
                                        <SfNumericTextBox @bind-Value=@ContactReviewData.ImplimentingPartnerCode Placeholder="ImplimentingPartnerCode" FloatLabelType="FloatLabelType.Never" />
                                    </div>

                                      
                                    <div class="col-md-4" hidden>
                                        <SfNumericTextBox @bind-Value=@ContactReviewData.DistrrictCode Placeholder="DistrrictCode" FloatLabelType="FloatLabelType.Never" />
                                    </div>

                                <div class="col-md-4">
                                    <label> Description</label>
                                    <SfTextBox Multiline=false @bind-Value=@ContactReviewData.Facility Placeholder="Facility" FloatLabelType="FloatLabelType.Never" />
                                </div>
                                <div class="col-md-4">
                                    <label> Description</label>
                                    <SfTextBox Multiline=false @bind-Value=@ContactReviewData.SapCode Placeholder="SapCode" FloatLabelType="FloatLabelType.Never" />
                                </div>
                              
                                    <div class="col-md-4" hidden>
                                        <SfNumericTextBox @bind-Value=@ContactReviewData.SupportedByMaul Placeholder="SupportedByMaul" FloatLabelType="FloatLabelType.Never" />
                                    </div>
                                      
                                    <div class="col-md-4" hidden>
                                        <SfNumericTextBox @bind-Value=@ContactReviewData.IsAccredited Placeholder="IsAccredited" FloatLabelType="FloatLabelType.Never" />
                                    </div>
                                     <div class="col-md-4" hidden>
                                        <SfNumericTextBox @bind-Value=@ContactReviewData.LevelOfCare Placeholder="LevelOfCare" FloatLabelType="FloatLabelType.Never" />
                                    </div>
                                     <div class="col-md-4" hidden>
                                        <SfNumericTextBox @bind-Value=@ContactReviewData.ClientTypeCode Placeholder="ClientTypeCode" FloatLabelType="FloatLabelType.Never" />
                                    </div>
                                     <div class="col-md-4" hidden>
                                        <SfNumericTextBox @bind-Value=@ContactReviewData.RegionCode Placeholder="RegionCode" FloatLabelType="FloatLabelType.Never" />
                                    </div>
                                     <div class="col-md-4" hidden>
                                        <SfNumericTextBox @bind-Value=@ContactReviewData.OwnershipId Placeholder="OwnershipId" FloatLabelType="FloatLabelType.Never" />
                                    </div>
                                     <div class="col-md-4" hidden>
                                        <SfNumericTextBox @bind-Value=@ContactReviewData.CdcregionId Placeholder="CdcregionId" FloatLabelType="FloatLabelType.Never" />
                                    </div>
                                     <div class="col-md-4">
                                    <label> FacilityType</label>
                                    <SfTextBox Multiline=false @bind-Value=@ContactReviewData.FacilityTypeId Placeholder="FacilityTypeId" FloatLabelType="FloatLabelType.Never" />
                                </div>
                                <div class="col-md-4">
                                    <label> FacilityType</label>
                                    <SfTextBox Multiline=false @bind-Value=@ContactReviewData.Longtitude Placeholder="Longtitude" FloatLabelType="FloatLabelType.Never" />
                                </div>
                                <div class="col-md-4">
                                    <label> FacilityType</label>
                                    <SfTextBox Multiline=false @bind-Value=@ContactReviewData.Latititude Placeholder="Latititude" FloatLabelType="FloatLabelType.Never" />
                                </div>
                                <div class="col-md-4">
                                    <label> FacilityType</label>
                                    <SfTextBox Multiline=false @bind-Value=@ContactReviewData.VillageId Placeholder="VillageId" FloatLabelType="FloatLabelType.Never" />
                                </div>
                                  <div class="col-md-4" hidden>
                                        <SfNumericTextBox @bind-Value=@ContactReviewData.ComprehensiveImplimentingPartnerCode Placeholder="ComprehensiveImplimentingPartnerCode" FloatLabelType="FloatLabelType.Never" />
                                    </div>
                                      <div class="col-md-4" hidden>
                                        <SfNumericTextBox @bind-Value=@ContactReviewData.PatientLoadCode Placeholder="PatientLoadCode" FloatLabelType="FloatLabelType.Never" />
                                    </div>
                                     <div class="col-md-4" hidden>
                                        <SfNumericTextBox @bind-Value=@ContactReviewData.IsActive Placeholder="IsActive" FloatLabelType="FloatLabelType.Never" />
                                    </div>
                                     <div class="col-md-4" hidden>
                                        <SfNumericTextBox @bind-Value=@ContactReviewData.NearestPublicHfDistance Placeholder="NearestPublicHfDistance" FloatLabelType="FloatLabelType.Never" />
                                    </div>
                                     <div class="col-md-4" hidden>
                                        <SfNumericTextBox @bind-Value=@ContactReviewData.PatientLoadCode Placeholder="PatientLoadCode" FloatLabelType="FloatLabelType.Never" />
                                    </div>
                                    <div class="col-md-4" hidden>
                                        <SfNumericTextBox @bind-Value=@ContactReviewData.ActiveArt Placeholder="ActiveArt" FloatLabelType="FloatLabelType.Never" />
                                    </div>
                                   
                                    <div class="col-md-4" hidden>
                                        <SfNumericTextBox @bind-Value=@ContactReviewData.SctostaffId Placeholder="SctostaffId" FloatLabelType="FloatLabelType.Never" />
                                    </div>
                                    </div>

                         
                        }
                    }
                </Template>
            </GridEditSettings>
            <GridColumns>
                <GridColumn HeaderText="Manage Records" Width="80">
                    <GridCommandColumns>
                        <GridCommandColumn Type="CommandButtonType.Edit" ButtonOption="@(new CommandButtonOptions() { CssClass="e-icons e-view-details",Content="View" })" Title="View"></GridCommandColumn>
                    </GridCommandColumns>
                </GridColumn>
                <GridColumn Field=@nameof(AFacilities.FacilityCode) HeaderText="Facility Code" Visible=true AllowEditing="false" IsPrimaryKey="true" Width="150"></GridColumn>
                <GridColumn Field=@nameof(AFacilities.DeliveryZoneCode) HeaderText="DeliveryZoneCode" Width="150"></GridColumn>
                <GridColumn Field=@nameof(AFacilities.ImplimentingPartnerCode) HeaderText="ImplimentingPartnerCode" Width="150"></GridColumn>
                <GridColumn Field=@nameof(AFacilities.DistrrictCode) HeaderText="DistrrictCode" Width="150"></GridColumn>
                     <GridColumn Field=@nameof(AFacilities.SapCode) HeaderText="SapCode" Width="150"></GridColumn>
 <GridColumn Field=@nameof(AFacilities.SupportedByMaul) HeaderText="SupportedByMaul" Width="150"></GridColumn>
  <GridColumn Field=@nameof(AFacilities.IsAccredited) HeaderText="IsAccredited" Width="150"></GridColumn>
       <GridColumn Field=@nameof(AFacilities.LevelOfCare) HeaderText="LevelOfCare" Width="150"></GridColumn>
        <GridColumn Field=@nameof(AFacilities.ClientTypeCode) HeaderText="ClientTypeCode" Width="150"></GridColumn>
         <GridColumn Field=@nameof(AFacilities.RegionCode) HeaderText="RegionCode" Width="150"></GridColumn>
         <GridColumn Field=@nameof(AFacilities.OwnershipId) HeaderText="OwnershipId" Width="150"></GridColumn>

         <GridColumn Field=@nameof(AFacilities.CdcregionId) HeaderText="CdcregionId" Width="150"></GridColumn>

         <GridColumn Field=@nameof(AFacilities.FacilityTypeId) HeaderText="FacilityTypeId" Width="150"></GridColumn>
               <GridColumn Field=@nameof(AFacilities.Longtitude) HeaderText="Longtitude" Width="150"></GridColumn>
                 <GridColumn Field=@nameof(AFacilities.Latititude) HeaderText="Latititude" Width="150"></GridColumn>
                   <GridColumn Field=@nameof(AFacilities.VillageId) HeaderText="VillageId" Width="150"></GridColumn>
                        <GridColumn Field=@nameof(AFacilities.ComprehensiveImplimentingPartnerCode) HeaderText="ComprehensiveImplimentingPartnerCode" Width="150"></GridColumn>
                         <GridColumn Field=@nameof(AFacilities.PatientLoadCode) HeaderText="PatientLoadCode" Width="150"></GridColumn>
                          <GridColumn Field=@nameof(AFacilities.IsActive) HeaderText="IsActive" Width="150"></GridColumn>
                           <GridColumn Field=@nameof(AFacilities.NearestPublicHfDistance) HeaderText="NearestPublicHfDistance" Width="150"></GridColumn>
                            <GridColumn Field=@nameof(AFacilities.PatientLoadCode) HeaderText="PatientLoadCode" Width="150"></GridColumn>
                           
                                  <GridColumn Field=@nameof(AFacilities.SctostaffId) HeaderText="SctostaffId" Width="150"></GridColumn>
                                 
                                  


            </GridColumns>
        </SfGrid>
    </div>
</div>

@code {
    SfGrid<AFacilities>? DataGrid { get; set; }
    //List<AAdverseEvent>? Datasource { get; set; }


    /// <summary>
    /// Event for Toolbar click for Grid Exporting
    /// </summary>
    public void GridToolbarClick(Syncfusion.Blazor.Navigations.ClickEventArgs args)
    {
        if (args.Item.Id == "Grid1_excelexport")
        {
            this.DataGrid.ExportToExcelAsync();
        }
        if (args.Item.Id == "Grid1_pdfexport")
        {
            this.DataGrid.ExportToPdfAsync();
        }
        if (args.Item.Id == "Grid1_csvexport")
        {
            this.DataGrid.ExportToCsvAsync();
        }
    }

    // protected override async Task OnInitializedAsync()
    // {
    //     try
    //     {
    //         await base.OnInitializedAsync();
    //         List<Task> t = new List<Task>();
    //         t.Add(
    //            Task.Run(async () =>
    //            {
    //                Datasource = await Repo.GetAdverseEvent();

    //            }));


    //         Task _t = Task.WhenAll(t);
    //         await _t;
    //     }
    //     catch (Exception ex)
    //     {
    //         toastService.ShowError(ex.Message);
    //     }

    // }

    public class AFacilitiesAdapter : DataAdaptor
    {
        public IToastService toastService;
        IUtilityService Repo;
        public AFacilitiesAdapter(IToastService ts, IUtilityService Repo)
        {
            toastService = ts;
            this.Repo = Repo;
        }

        public override async Task<Object> ReadAsync(DataManagerRequest dataManagerRequest, string key = null)
        {
            var data = new List<AFacilities>();
            try
            {
                int FacilityId = 0;
                if (dataManagerRequest.Params != null && dataManagerRequest.Params.Count > 0)
                {
                    var val = dataManagerRequest.Params;
                    if (val.FirstOrDefault(o => o.Key == "FacilityId").Value != null)
                    {
                        FacilityId = Convert.ToInt32(val.FirstOrDefault(o => o.Key == "FacilityId").Value.ToString());
                    }
                }
                data = await Repo.GetFacilities();
            }
            catch (Exception ex)
            {
                toastService.ShowError(ex.Message.ToString());
            }

            IEnumerable GridData = data;
            int _count = data.Count;
            if (dataManagerRequest.Search != null && dataManagerRequest.Search.Count > 0)
            {
                // Searching
                GridData = DataOperations.PerformSearching(GridData, dataManagerRequest.Search);
            }
            if (dataManagerRequest.Where != null && dataManagerRequest.Where.Count > 0)
            {
                // Filtering
                GridData = DataOperations.PerformFiltering(GridData, dataManagerRequest.Where, dataManagerRequest.Where[0].Operator);
            }
            if (dataManagerRequest.Sorted?.Count > 0) // perform Sorting
            {
                GridData = DataOperations.PerformSorting(GridData, dataManagerRequest.Sorted);
            }
            if (dataManagerRequest.Skip != 0)
            {
                GridData = DataOperations.PerformSkip(GridData, dataManagerRequest.Skip); //Paging
            }
            if (dataManagerRequest.Take != 0)
            {
                GridData = DataOperations.PerformTake(GridData, dataManagerRequest.Take);
            }
            IDictionary<string, object> aggregates = new Dictionary<string, object>();
            if (dataManagerRequest.Aggregates != null) // Aggregation
            {
                aggregates = DataUtil.PerformAggregation(GridData, dataManagerRequest.Aggregates);
            }
            if (dataManagerRequest.Group != null && dataManagerRequest.Group.Any()) //Grouping
            {
                foreach (var group in dataManagerRequest.Group)
                {
                    GridData = DataUtil.Group<AFacilities>(GridData, group, dataManagerRequest.Aggregates, 0, dataManagerRequest.GroupByFormatter);
                }
            }
            return dataManagerRequest.RequiresCounts ? new DataResult() { Result = GridData, Count = _count, Aggregates = aggregates } : (object)GridData;
        }

        public override async Task<Object> InsertAsync(DataManager dataManager, object value, string key)
        {
            try
            {
                var val = (value as AFacilities);
                await Repo.SaveFacility(val);
                // string result = "Record Saved Successfully";
                //toastService.ShowInfo(result);
            }
            catch (Exception ex)
            {
                toastService.ShowError(ex.Message.ToString());
            }
            return value;
        }

        public override async Task<object> RemoveAsync(DataManager dataManager, object value, string keyField, string key)
        {
            try
            {
                int data = (int)value;

            }
            catch (Exception ex)
            {
                toastService.ShowError(ex.Message.ToString());
            }


            return value;
        }

        public override async Task<object> UpdateAsync(DataManager dataManager, object value, string keyField, string key)
        {
            try
            {
                var val = (value as AFacilities);
                await Repo.SaveFacility(val);
                //string result = "Record Saved Successfully";
                //toastService.ShowInfo(result);
            }
            catch (Exception ex)
            {
                toastService.ShowError(ex.Message.ToString());
            }

            return value;
        }
    }
    private void OnAYesActionBegin(ActionEventArgs<AFacilities> args)
    {
        if (args.RequestType == Syncfusion.Blazor.Grids.Action.Add)
        {


        }
        else if (args.RequestType == Syncfusion.Blazor.Grids.Action.BeginEdit)
        {

        }
        else if (args.RequestType == Syncfusion.Blazor.Grids.Action.Save)
        {
            if (string.IsNullOrEmpty(args.Data.VillageId))
            {
                toastService.ShowInfo("Please Enter the First Name before saving this Contact.");
                args.Cancel = true;
            }
            else
            {
                // args.Cancel = false;
            }

        }
    }
    private void OnAYesActionComplete(ActionEventArgs<AFacilities> args)
    {
        if (args.RequestType == Syncfusion.Blazor.Grids.Action.Add || args.RequestType == Syncfusion.Blazor.Grids.Action.BeginEdit)
        {
            DataGrid.PreventRender(false);
        }
    }

}
